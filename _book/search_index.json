[
["choosing-and-evaluating-models.html", "Chapter 2 Choosing and evaluating models 2.1 Building and applying a logistic regression spam model", " Chapter 2 Choosing and evaluating models 2.1 Building and applying a logistic regression spam model set.seed(123) library(tidyverse, warn.conflicts = FALSE) Using logistic regression to classify emails into spam or non-spam: # reading the file containing spam data spamD &lt;- readr::read_tsv(&quot;https://raw.githubusercontent.com/WinVector/zmPDSwR/master/Spambase/spamD.tsv&quot;) ## Parsed with column specification: ## cols( ## .default = col_double(), ## spam = col_character() ## ) ## See spec(...) for full column specifications. # creating training and testing datasets spamTrain &lt;- dplyr::filter(.data = spamD, rgroup &gt;= 10) spamTest &lt;- dplyr::filter(.data = spamD, rgroup &lt; 10) # training the model spamModel &lt;- stats::glm(formula = spam ==&quot;spam&quot; ~ ., family = stats::binomial(link = &quot;logit&quot;), data = dplyr::select(spamTrain, -rgroup)) ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred # looking at the result broom::tidy(spamModel) ## # A tibble: 58 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -1.62 0.151 -10.7 1.24e-26 ## 2 word.freq.make -0.327 0.237 -1.38 1.68e- 1 ## 3 word.freq.address -0.155 0.0771 -2.00 4.51e- 2 ## 4 word.freq.all 0.149 0.123 1.22 2.23e- 1 ## 5 word.freq.3d 2.19 1.56 1.40 1.60e- 1 ## 6 word.freq.our 0.476 0.102 4.68 2.91e- 6 ## 7 word.freq.over 0.744 0.252 2.95 3.13e- 3 ## 8 word.freq.remove 2.34 0.349 6.70 2.08e-11 ## 9 word.freq.internet 0.801 0.220 3.63 2.83e- 4 ## 10 word.freq.order 0.645 0.300 2.15 3.14e- 2 ## # ... with 48 more rows # looking at the model summary broom::glance(spamModel) ## # A tibble: 1 x 7 ## null.deviance df.null logLik AIC BIC deviance df.residual ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 5556. 4142 -807. 1730. 2097. 1614. 4085 # with predicted response on training data spamTrain &lt;- broom::augment( x = spamModel, newdata = spamTrain, type.predict = &quot;response&quot; ) # with predicted response on test data spamTest &lt;- broom::augment( x = spamModel, newdata = spamTest, type.predict = &quot;response&quot; ) # performance with the training data train_perform &lt;- table(y = spamTrain$spam, glmPred = spamTrain$.fitted &gt; 0.5) # performance with the test data test_perform &lt;- table(y = spamTest$spam, glmPred = spamTest$.fitted &gt; 0.5) Looking at actual and predicted sample responses sample &lt;- spamTest[c(7,35,224,327), c(&#39;spam&#39;, &#39;.fitted&#39;)] print(sample) ## # A tibble: 4 x 2 ## spam .fitted ## &lt;chr&gt; &lt;dbl&gt; ## 1 spam 0.990 ## 2 spam 0.480 ## 3 non-spam 0.000685 ## 4 non-spam 0.000143 Spam confusion matrix (to assess performance of the model) # performance with the test data (cM &lt;- table(truth = spamTest$spam, prediction = spamTest$.fitted &gt; 0.5)) ## prediction ## truth FALSE TRUE ## non-spam 264 14 ## spam 22 158 Assessing the performance # chaning column names to align with rownames colnames(cM) &lt;- c(&quot;non-spam&quot;, &quot;spam&quot;) # looking at performance measures caret::confusionMatrix(cM) ## Confusion Matrix and Statistics ## ## prediction ## truth non-spam spam ## non-spam 264 14 ## spam 22 158 ## ## Accuracy : 0.9214 ## 95% CI : (0.8928, 0.9443) ## No Information Rate : 0.6245 ## P-Value [Acc &gt; NIR] : &lt;2e-16 ## ## Kappa : 0.834 ## Mcnemar&#39;s Test P-Value : 0.2433 ## ## Sensitivity : 0.9231 ## Specificity : 0.9186 ## Pos Pred Value : 0.9496 ## Neg Pred Value : 0.8778 ## Prevalence : 0.6245 ## Detection Rate : 0.5764 ## Detection Prevalence : 0.6070 ## Balanced Accuracy : 0.9208 ## ## &#39;Positive&#39; Class : non-spam ## Entering data by hand (example of a good spam filter at WinVectorLLC blog) t &lt;- as.table(matrix(data = c(288 - 1, 17, 1, 13882 - 17), nrow = 2, ncol = 2)) rownames(t) &lt;- rownames(cM) colnames(t) &lt;- c(&quot;non-spam&quot;, &quot;spam&quot;) # looking at performance measures caret::confusionMatrix(t) ## Confusion Matrix and Statistics ## ## non-spam spam ## non-spam 287 1 ## spam 17 13865 ## ## Accuracy : 0.9987 ## 95% CI : (0.998, 0.9992) ## No Information Rate : 0.9785 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.9689 ## Mcnemar&#39;s Test P-Value : 0.000407 ## ## Sensitivity : 0.94408 ## Specificity : 0.99993 ## Pos Pred Value : 0.99653 ## Neg Pred Value : 0.99878 ## Prevalence : 0.02145 ## Detection Rate : 0.02025 ## Detection Prevalence : 0.02032 ## Balanced Accuracy : 0.97200 ## ## &#39;Positive&#39; Class : non-spam ## Accuracy for our glm-based classifier was 92.14%, while itâ€™s 99.87% for a good classifier. "]
]
